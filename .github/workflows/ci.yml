name: CI

# Controls when the workflow will run
on:
  # Triggers the workflow on push or pull request events but only for the master branch
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

jobs:
  build:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest 

    steps:
      # checks-out your repository under $GITHUB_WORKSPACE , so that workflow can access it.
      - name: checkout
        uses: actions/checkout@v2
      
      - name: install Pandoc
        uses: r-lib/actions/setup-pandoc@v1
      
      - name: setup Redis
        uses: supercharge/redis-github-action@1.4.0
      
      # to speed up the execution time of Github Actions
      - name: setup caching for vendor and node_modules
        uses: actions/cache@v2
        id: yarn-cache # use this to check for `cache-hit` (`steps.yarn-cache.outputs.cache-hit != 'true'`)
        with:
          path: |-
            vendor
            node_modules
          key: ${{ runner.os }}-yarn-${{ hashFiles('**/yarn.lock') }}
          restore-keys: |
                ${{ runner.os }}-yarn-
      
      # Setting up MariaDB based upon 'config/database.example.yml'
      - name: setup MariaDB server
        uses: getong/mariadb-action@v1.1  
        with:
          host port: 3306 
          mariadb version: '10.5' 
          mysql database: 'dashboard_testing' 
          mysql user: 'wiki'
          mysql password: 'wikiedu'
          
      # Starting ruby 
      - name: setup Ruby
        uses: ruby/setup-ruby@v1    
        with:
           ruby-version: 2.7.1
           bundler-cache: true
     
      - name: setup Node
        uses: actions/setup-node@v2
        with:
          node-version: '14'

      - name: setup Dashboard database
        env:
          RAILS_ENV: test
          DATABASE_PORT: 3306
        run: |
            mkdir tmp -m 777
            cp config/application.example.yml config/application.yml
            cp config/database.example.yml config/database.yml
            bin/rails db:migrate RAILS_ENV=test
      
      #Testing the pushed code onwards
      
      - name: JavaScript test suite 
        run: |
            yarn
            yarn build
            yarn run test 
      
      - name: JavaScript linting
        run: yarn lint-non-build
      
      - name: Ruby rspec test suite
        run : COVERAGE=true bundle exec rspec spec/ --color --profile --format documentation
            
      - name: Ruby linting
        run: bundle exec rubocop
            
    
              
      
     
