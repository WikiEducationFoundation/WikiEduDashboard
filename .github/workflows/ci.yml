name: CI

# Controls when the workflow will run
on:
  # Triggers the workflow on push or pull request events but only for the master branch
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

jobs:
  build:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest 
#     services:
#      mariadb:
#         image: mariadb:10.6
#         env:
#           mysql database: test
#           mysql user: root
#           host port: 3306
#           MARIADB_ALLOW_EMPTY_PASSWORD: yes
#           mysql password: 
          
#         env:
#           MYSQL_HOST: 127.0.0.1
#           MYSQL_DB: test
#           MYSQL_ALLOW_EMPTY_PASSWORD: yes
#           MYSQL_PASSWORD:
#         ports:
#           - "3306:3306"
  

    steps:
      - uses: actions/checkout@v2
      - name: Cache multiple paths
        uses: actions/cache@v2
        id: yarn-cache # use this to check for `cache-hit` (`steps.yarn-cache.outputs.cache-hit != 'true'`)
        with:
          path: |-
            vendor
            node_modules
          key: ${{ runner.os }}-yarn-${{ hashFiles('**/yarn.lock') }}
          restore-keys: |
                ${{ runner.os }}-yarn-
     
      - uses: getong/mariadb-action@v1.1
        with:
          host port: 3306 
          mariadb version: '10.5' 
          mysql database: 'test' 
          mysql user: 'root' 
#           MARIADB_ALLOW_EMPTY_PASSWORD: yes
#           mysql password:
      
      - uses: ruby/setup-ruby@v1
        with:
           ruby-version: 2.7.1
           bundler-cache: true

           
      - name: Setup Node
        uses: actions/setup-node@v1
               
      - run: 'export PATH=$PATH:`yarn global bin`'
      
      - run: export DB=test
      
      - run: export SENDER_EMAIL_ADDRESS='sender@wikiedu.org'
      
      - name: Database and Build
        run: |
            yarn install
            gem install bundler
            gem install rubocop
            gem install rubocop-rspec-focused
            bundle config set path 'vendor'
            bundle install --jobs=3 --retry=3
            
      - run : mkdir tmp -m 777
      - run: cp config/database.example.yml config/database.yml
      - run: cp config/application.example.yml config/application.yml

      - name: Run tests
        env:
          RAILS_ENV: test
          DATABASE_PORT: 3306
        run: |
            
            bin/rails db:create
            bin/rails db:migrate RAILS_ENV=test
          
           
   # bin/rails db:schema:load
   # bin/rails db:create
   #bin/rails test
          
      - run: yarn
      - run:  yarn build
      - run:  COVERAGE=true bundle exec rspec spec/ --format documentation --dry-run --example “#instance_method”
      - run:  bundle exec rubocop
      - run:  yarn lint-non-build
    
              
      
     
