.stat-display
  .stat-display__stat
    .stat-display__value= presenter.courses.count
    %small= t("#{presenter.course_string_prefix}.courses")
  .stat-display__stat.tooltip-trigger
    .stat-display__value
      = presenter.user_count
      %img{:src => "/assets/images/info.svg", :alt => "tooltip default logo"}
    %small= t("#{presenter.course_string_prefix}.students")
    .tooltip.dark
      %h4
        = presenter.trained_percent
        \%
      %p= t("users.up_to_date_with_training")
  .stat-display__stat
    .stat-display__value= presenter.word_count
    %small= t("metrics.word_count")
  .stat-display__stat
    .stat-display__value= presenter.courses.sum(:view_sum)
    %small= t("metrics.view_count_description")
  .stat-display__stat
    .stat-display__value= presenter.courses.sum(:article_count)
    %small= t("metrics.articles_edited")
  .stat-display__stat
    .stat-display__value= presenter.courses.sum(:new_article_count)
    %small= t("metrics.articles_created")
  .stat-display__stat.tooltip-trigger
    .stat-display__value
      = presenter.courses.sum(:upload_count)
      %img{:src => "/assets/images/info.svg", :alt => "tooltip default logo"}
    %small= t("metrics.upload_count")
    .tooltip.dark
      %h4= presenter.uploads_in_use_count
      %p= t("metrics.uploads_in_use_count", count: presenter.uploads_in_use_count)
      %h4= presenter.upload_usage_count
      %p= t("metrics.upload_usages_count", count: presenter.upload_usage_count)

:javascript
  $('.stat-display__value').each(function () {
    $(this).prop('Counter', 0).animate({
      Counter: $(this).text()
    }, {
      duration: 1000,
      easing: 'swing',
      step: function (now) {
        const formattedValue = numFormat(Math.ceil(now));
        $(this).text(formattedValue);
      }
    });
  });

  //reformat number, set digits to control decimal point
  function numFormat(num, digits = 2) {
    const si = [
      { value: 1, symbol: "" },
      { value: 1E3, symbol: "K" },
      { value: 1E6, symbol: "M" },
      { value: 1E9, symbol: "G" },
      { value: 1E12, symbol: "T" },
      { value: 1E15, symbol: "P" },
      { value: 1E18, symbol: "E" }
    ];
    const rx = /\.0+$|(\.[0-9]*[1-9])0+$/;
    let i;
    for (i = si.length - 1; i > 0; i--) {
      if (num >= si[i].value) {
        break;
      }
    }
    return (num / si[i].value).toFixed(digits).replace(rx, "$1") + si[i].symbol;
  }
