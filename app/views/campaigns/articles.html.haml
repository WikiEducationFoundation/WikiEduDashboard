- content_for :before_title, t('courses.campaign_articles', title: @campaign.title) + ' â€” '

= render 'nav'

.container
  %section.overview.container
    = render 'courses/header_stats', presenter: @presenter

.container
  %section#campaign-articles
    .section-header
      %h3
        = t('courses.campaign_articles', title: @campaign.title)
      .sort-select
        %select.sorts{rel: 'campaign-articles'}
          %option{rel: 'asc', value: 'title'}
            = t("articles.title")
          %option{rel: 'desc', value: 'char_added'}
            = t("metrics.char_added")
          %option{rel: 'desc', value: 'views'}
            = t("metrics.view")
          %option{rel: 'asc', value: 'lang_project'}
            = t("articles.wiki")
          %option{rel: 'asc', value: 'course_title'}
            = t("#{@presenter.course_string_prefix}.courses")

    %table.table.table--hoverable.table--sortable
      %thead
        %tr
          %th.sort.sortable.asc{'data-default-order' => 'asc', 'data-sort' => 'title'}
            = t('articles.title')
            %span.sortable-indicator
          %th.sort.sortable{'data-default-order' => 'desc', 'data-sort' => 'char_added'}
            .tooltip-trigger
              = t('metrics.char_added')
              %span.sortable-indicator
              %span.tooltip-indicator
              .tooltip.dark
                %p= t('articles.character_doc')
          %th.sort.sortable{'data-default-order' => 'desc', 'data-sort' => 'views'}
            .tooltip-trigger
              = t('metrics.view')
              %span.sortable-indicator
              %span.tooltip-indicator
              .tooltip.dark
                %p= t('articles.view_doc')
          %th.sort.sortable{'data-sort' => 'lang_project'}
            = t('articles.wiki')
            %span.sortable-indicator
          %th.sort.sortable{'data-sort' => 'course_title'}
            = t("#{@presenter.course_string_prefix}.courses")
            %span.sortable-indicator

      - articles = @campaign.articles_courses.includes(article: :wiki).includes(:course).order('articles.deleted', character_sum: :desc).paginate(page: params[:page], per_page: 1000)

      = will_paginate articles

      %tbody.list
        - if articles.empty?
          %tr.disabled
            %td{:class => "text-center", :colSpan => 3}
              %span= I18n.t('articles.none')
        - else
          - articles.each do |ac|
            - cache [ac, locale] do
              = render 'campaigns/article_row', article: ac.article, article_course: ac

  = will_paginate articles
